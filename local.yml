---
- hosts: localhost
  connection: local
  become: true

  tasks:
    - name: install packages
      apt:
        name: "{{ item }}"
        update_cache: yes
        install_recommends: no
        force: yes
        dpkg_options: 'force-confdef,force-confold'
        state: latest
      loop:
        - webhook
        - iptables

    - name: installs, logs in, and setups tailscale
      shell: |
          set timeout 30
          curl -fsSL https://tailscale.com/install.sh | sh
          tailscale login --authkey=$(</root/tailscaleapikey.txt)
          tailscale up --hostname=homelab-proxy
          exit 0
      args:
        executable: /bin/bash

    - name: get traefik configs and inserts homelab ip
      shell: |
        mkdir /etc/traefik
        cp -f /root/.ansible/pull/homelab-proxy/traefik/traefik.toml /etc/traefik/traefik.toml
        cp -f /root/.ansible/pull/homelab-proxy/traefik/dynamic.toml /etc/traefik/dynamic.toml
        string=s/MYHOMELABIP/$(tailscale ip homelab | head -n 1)/g
        sed -i $string /etc/traefik/dynamic.toml

    - name: install traefik
      shell: |
        cd /tmp
        wget https://github.com/traefik/traefik/releases/download/v2.9.6/traefik_v2.9.6_linux_amd64.tar.gz -O traefik.tar.gz
        tar xzvf traefik.tar.gz
        mv traefik /bin/traefik
        rm traefik.tar.gz

    # - name: Start unattended upgrades
      # service:
        # name: unattended-upgrades
        # enabled: true 
        # state: started
        # daemon_reload: yes        

    - name: disable systemd-resolved
      service:
        name: systemd-resolved
        enabled: false
        state: stopped

    - name: change name server
      shell: echo "nameserver 1.1.1.1" > /etc/resolv.conf

    - name: get webhooks
      shell: |
        cp -f /root/.ansible/pull/homelab-proxy/hooks.json /root/hooks.json
        string=s/mysecret/$(</root/webhooksecret.txt)/g
        sed -i $string /root/hooks.json
      args:
        executable: /bin/bash

    - name: copy ansible-pull service
      shell: |
        cp -f /root/.ansible/pull/homelab-proxy/ansible-pull.service /etc/systemd/system/ansible-pull.service
        cp -f /root/.ansible/pull/homelab-proxy/ansible-pull.sh /root/ansible-pull.sh
        chmod +x /root/ansible-pull.sh

    - name: Start ansible-pull service, if not started
      service:
        name: ansible-pull
        enabled: true 
        state: started
        daemon_reload: yes

    - name: copy traefik service
      shell: cp -f /root/.ansible/pull/homelab-proxy/traefik.service /etc/systemd/system/traefik.service

    - name: Start traefik service, if not started
      service:
        name: traefik
        enabled: false
        state: started
        daemon_reload: yes

    - name: Restart traefik and reload config
      service:
        name: traefik
        enabled: true 
        state: restarted
        daemon_reload: yes

    - name: configure Routes with iptables
      shell: |
        echo 1 > /proc/sys/net/ipv4/ip_forward
        homelabip=$(tailscale ip homelab | head -n 1)
        serverip=$(tailscale ip | head -n 1)

        # iptables -t nat -A PREROUTING -p tcp --dport 2222 -j DNAT --to-destination 1.2.3.4:8888
        # iptables -t nat -A POSTROUTING -p tcp -d 1.2.3.4 --dport 8888 -j SNAT --to-source 2.3.4.5

        # Minecraft port
        #iptables -t nat -A PREROUTING -i eth0 -p all --dport 25565 -j DNAT --to-destination $homelabip:25565
        # Traefik ui port
        #iptables -t nat -A PREROUTING -i eth0 -p all --dport 8080 -j DNAT --to-destination $homelabip:8080
        # DNS port
        #iptables -t nat -A PREROUTING -i eth0 -p all --dport 53 -j DNAT --to-destination $homelabip:53
        # HTTP port
        #iptables -t nat -A PREROUTING -i eth0 -p all --dport 80 -j DNAT --to-destination $homelabip:80
        # HTTPS port
        #iptables -t nat -A PREROUTING -i eth0 -p all --dport 443 -j DNAT --to-destination $homelabip:443
        # All ports
        iptables -t nat -A PREROUTING -i eth0 -p all -j DNAT --to-destination $homelabip

        # Masks homelab and makes server act as gateway
        iptables -t nat -A POSTROUTING -s "$homelabip" -j MASQUERADE



